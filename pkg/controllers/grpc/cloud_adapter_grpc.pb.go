// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeteringServiceClient is the client API for MeteringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeteringServiceClient interface {
	CreateUsageEvent(ctx context.Context, in *CreateUsageEventReq, opts ...grpc.CallOption) (*CreateUsageEventRes, error)
	CreateUsageEventBatch(ctx context.Context, in *CreateUsageEventBatchReq, opts ...grpc.CallOption) (*CreateUsageEventBatchRes, error)
}

type meteringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteringServiceClient(cc grpc.ClientConnInterface) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) CreateUsageEvent(ctx context.Context, in *CreateUsageEventReq, opts ...grpc.CallOption) (*CreateUsageEventRes, error) {
	out := new(CreateUsageEventRes)
	err := c.cc.Invoke(ctx, "/cloud.MeteringService/CreateUsageEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) CreateUsageEventBatch(ctx context.Context, in *CreateUsageEventBatchReq, opts ...grpc.CallOption) (*CreateUsageEventBatchRes, error) {
	out := new(CreateUsageEventBatchRes)
	err := c.cc.Invoke(ctx, "/cloud.MeteringService/CreateUsageEventBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringServiceServer is the server API for MeteringService service.
// All implementations must embed UnimplementedMeteringServiceServer
// for forward compatibility
type MeteringServiceServer interface {
	CreateUsageEvent(context.Context, *CreateUsageEventReq) (*CreateUsageEventRes, error)
	CreateUsageEventBatch(context.Context, *CreateUsageEventBatchReq) (*CreateUsageEventBatchRes, error)
	mustEmbedUnimplementedMeteringServiceServer()
}

// UnimplementedMeteringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeteringServiceServer struct {
}

func (UnimplementedMeteringServiceServer) CreateUsageEvent(context.Context, *CreateUsageEventReq) (*CreateUsageEventRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsageEvent not implemented")
}
func (UnimplementedMeteringServiceServer) CreateUsageEventBatch(context.Context, *CreateUsageEventBatchReq) (*CreateUsageEventBatchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsageEventBatch not implemented")
}
func (UnimplementedMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {}

// UnsafeMeteringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteringServiceServer will
// result in compilation errors.
type UnsafeMeteringServiceServer interface {
	mustEmbedUnimplementedMeteringServiceServer()
}

func RegisterMeteringServiceServer(s grpc.ServiceRegistrar, srv MeteringServiceServer) {
	s.RegisterService(&MeteringService_ServiceDesc, srv)
}

func _MeteringService_CreateUsageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsageEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).CreateUsageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.MeteringService/CreateUsageEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).CreateUsageEvent(ctx, req.(*CreateUsageEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_CreateUsageEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsageEventBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).CreateUsageEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.MeteringService/CreateUsageEventBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).CreateUsageEventBatch(ctx, req.(*CreateUsageEventBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteringService_ServiceDesc is the grpc.ServiceDesc for MeteringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsageEvent",
			Handler:    _MeteringService_CreateUsageEvent_Handler,
		},
		{
			MethodName: "CreateUsageEventBatch",
			Handler:    _MeteringService_CreateUsageEventBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/controllers/grpc/cloud_adapter.proto",
}
